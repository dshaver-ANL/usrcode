C-----------------------------------------------------------------------
C  USER SPECIFIED ROUTINES: wall_shear
C       DRS - 12/04/2015 - original code
C	DRS - 12/22/2015 - counts the wall points before trying to 
C			   assign anything to them, error exits with
C			   exitt call
C
C       include this in the .usr file to add the wall distance and wall
C               shear arrays
C       Note: the current implementation of the wall distance is 
C               EXPENSIVE, but accurate for non-periodic domains
C		The memory overhead for large domains is also 
C		large, each processor carries an array the size of
C		ALL the wall nodes.
C       provides:
C		get_wall_info
C                       subroutine for calculating wall distance and
C                       building the global wall id array,
C                       call this after the BCs are set (usrdat3 works)
C               update_wall_shear
C                       subroutine for updating the wall shear array
C                       which can be accessed using the global wall id,
C                       call this in usrchk
C       requires:
C       WALLINFO - file containing the necessary values and arrays:
C		real walldist(lx1,ly1,lz1,lelv) - wall distance
C		real wallshear(lwf) - wall shear for every wall node
C		real wallxyz(ldim,lwf) - coordinates of every wall node
C		real dw_min - global minimum non-zero wall distance
C		integer wallgid(lx1,ly1,lz1,lelv) - indices used in the
C			wallshear array
C		integer wallcount(lp) - number of wall nodes on each 
C			process
C		integer nproc - number of processors
C       lwf - parameter specifying the global number of wall faces
C               (add to SIZE file)
C       mwf - parameter specifying the maximum local number of 
C               wall faces (add to SIZE file)
C-----------------------------------------------------------------------
      subroutine get_wall_info
      include 'mpif.h'
      include 'SIZE'
      include 'TOTAL'
      include 'usrcode/WALLINFO'

      real lwallxyz(ldim,mwf*lx1*lz1),ds

      integer ielem,iface,nface,i,i0,i1,j,j0,j1,k,k0,k1,ierr
      integer nxyz1,ntot,mwmax
      integer disp(lp),coordcount(lp),nwp,nwf
      integer eflag
      
      call MPI_Comm_Size(MPI_COMM_WORLD,nproc,ierr)
      iwall=0
      nwf=0
      nwp=0
      nxyz1=nx1*ny1*nz1
      ntot=nxyz1*nelv
      dw_min=1.0d22
      eflag=0

      nface=2*ndim
      do ielem=1,nelv
      do iface=1,nface
        if(cbc(iface,ielem,1).eq.'W  ') then
          call facind(i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,iface)
          iwall=iwall+(i1-i0+1)*(j1-j0+1)*(k1-k0+1)
          nwf=nwf+1
        endif
      enddo
      enddo

      call MPI_AllGather(iwall,1,MPI_INTEGER,
     &            wallcount,1,MPI_INTEGER,MPI_COMM_WORLD,ierr)
      mwmax=iglmax(nwf,1) !local maximum number of wall faces
      nwf=iglsum(nwf,1) !global total number of wall faces

      do i=1,nproc
        nwp=nwp+wallcount(i) !global number of wall points (important!)
        coordcount(i)=ldim*wallcount(i)
        if(i.gt.1) then
          disp(i)=disp(i-1)+coordcount(i-1)
        else
          disp(1)=0
        endif
      enddo

      if(mwmax.gt.mwf) then
        if(nid.eq.0) then
          write(*,'(5x,2a)')'WARNING: Number of local wall faces'
     &              ,' greater than assigned array!'
          write(*,'(5x,a,i5)')'recompile with mwf >= ',mwmax
        endif
        call exitt
      endif
      if(nwf.gt.lwf) then
        if(nid.eq.0) then
          write(*,'(5x,2a)')'WARNING: Number of total wall faces'
     &              ,' greater than assigned array!'
          write(*,'(5x,a,i7)')'recompile with lwf >= ',nwf
        endif
        call exitt
      endif

      iwall=0
      do ielem=1,nelv
      do iface=1,nface
        if(cbc(iface,ielem,1).eq.'W  ') then
          call facind(i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,iface)
          do i=i0,i1
          do j=j0,j1
          do k=k0,k1
            iwall=iwall+1
            lwallxyz(1,iwall)=xm1(i,j,k,ielem)
            lwallxyz(2,iwall)=ym1(i,j,k,ielem)
            if(if3d) lwallxyz(ldim,iwall)=zm1(i,j,k,ielem)
          enddo
          enddo
          enddo
        endif
      enddo
      enddo

      call MPI_AllGatherV(lwallxyz(1,1),coordcount(nid+1),MPI_DOUBLE,
     &      wallxyz(1,1),coordcount,disp,MPI_DOUBLE,MPI_COMM_WORLD,ierr)
      
      if(nid.eq.0) 
     &  write(*,'(5x,a)') 'Calculating wall distances, be patient...'

      call cfill(walldist,1.0d30,ntot) !wall distance operation, SLOW
      do i=1,ntot
        do j=1,nwp
          ds=(wallxyz(1,j)-xm1(i,1,1,1))**2
          ds=ds+(wallxyz(2,j)-ym1(i,1,1,1))**2
          if(if3d) ds=ds+(wallxyz(ldim,j)-zm1(i,1,1,1))**2
          if(ds.gt.0.0) then
            ds=sqrt(ds)
            dw_min=min(dw_min,ds)
          endif
          if(ds.lt.walldist(i,1,1,1)) then
            walldist(i,1,1,1)=ds
            wallgid(i,1,1,1)=j
          endif
        enddo
      enddo

      dw_min=glmin(dw_min,1)

      if(nid.eq.0) then
        write(*,'(5x,a)') 'Done calculating wall distances'
        write(*,'(5x,a,es15.5)') 'minimum wall distance = ',dw_min
        write(*,*)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine update_wall_shear(visc)
      include 'mpif.h'
      include 'SIZE'
      include 'TOTAL'
      include 'usrcode/WALLINFO'

      integer lxyz
      parameter(lxyz=lx1*ly1*lz1)

      integer nface,ielem,iface,i,i0,i1,i2,j,j0,j1,j2,k,k0,k1,iwall
      integer ipoint
      integer disp(lp)

      real visc(1)
      real gradu(lxyz,3,3),taun(3),norm(3)
      real ux1,uy1,uz1,vsca
      real lwallshear(mwf*lx1*lz1)

      iwall=0
      nface=2*ndim
      do ielem=1,nelv
        call gradm11(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),vx,ielem)
        call gradm11(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),vy,ielem)
        if(if3d)
     &    call gradm11(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),vz,ielem)
        do iface=1,nface
          if(cbc(iface,ielem,1).eq.'W  ') then
            call facind(i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,iface)
            do i=i0,i1
            do j=j0,j1
            do k=k0,k1
              ipoint=lx1*ly1*(k-1)+lx1*(j-1)+i
              iwall=iwall+1
              if    ((iface.eq.1).or.(iface.eq.3)) then
                norm(1)=unx(i,k,iface,ielem) !construct the wall unit normal vector
                norm(2)=uny(i,k,iface,ielem) !I'm like 99% certain we don't care if it's 
                norm(3)=unz(i,k,iface,ielem) !inward or outward positive
              elseif((iface.eq.2).or.(iface.eq.4)) then
                norm(1)=unx(j,k,iface,ielem)
                norm(2)=uny(j,k,iface,ielem)
                norm(3)=unz(j,k,iface,ielem)
              else
                norm(1)=unx(i,j,iface,ielem)
                norm(2)=uny(i,j,iface,ielem)
                norm(3)=unz(i,j,iface,ielem)
              endif

              do i2=1,ldim !build shear stress VECTOR on the wall face
              taun(i2)=0.0  
                do j2=1,ldim
                  taun(i2)=taun(i2)+
     &              (gradu(ipoint,i2,j2)+gradu(ipoint,j2,i2))
     &              *visc(ipoint)*norm(j2) !only use laminar viscosity (on the wall)
                enddo                           !revisit for HRN model
              enddo

              vsca=0.0
              do i2=1,ldim
                vsca=vsca+taun(i2)*norm(i2) !magnitude of shear stress vec. normal to the wall
              enddo

              lwallshear(iwall)=0.0 !the component we care about is tangential to the wall
              do i2=1,ldim
                lwallshear(iwall)=
     &            lwallshear(iwall)+(taun(i2)-vsca*norm(i2))**2
              enddo
              lwallshear(iwall)=sqrt(lwallshear(iwall))
              
            enddo !i=i0,i1
            enddo !j=j0,j1
            enddo !k=k0,k1
          endif !cbc.eq.'W  '
        enddo !iface=1,nface
      enddo !ielem=1,nelv

      do i=1,nproc
        if(i.gt.1) then
          disp(i)=disp(i-1)+wallcount(i-1)
        else
          disp(1)=0
        endif
      enddo

      call MPI_AllGatherV(lwallshear(1),wallcount(nid+1),MPI_DOUBLE,
     &      wallshear(1),wallcount,disp,MPI_DOUBLE,MPI_COMM_WORLD,ierr)
      return
      end
c-----------------------------------------------------------------------
